{"version":3,"sources":["SiteOption.js","App.js","serviceWorker.js","index.js"],"names":["SiteOption","props","className","onClick","removeSite","site","this","React","Component","App","state","sites","newSite","handleChange","bind","handleSubmit","chrome","storage","sync","get","result","setState","blockedSites","console","log","event","target","value","newArr","unshift","set","filter","siteItem","splice","indexOf","type","placeholder","onChange","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAuBeA,G,wDApBb,WAAYC,GAAQ,uCACZA,G,kJASE,IAAD,OACP,OACE,yBAAKC,UAAU,eACb,uBAAGC,QAAS,kBAAM,EAAKF,MAAMG,WAAW,EAAKH,MAAMI,OAAOH,UAAU,iBAApE,KACA,2BAAII,KAAKL,MAAMI,W,GAfEE,IAAMC,YCwEhBC,E,kDAnEb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,MAAO,GACPC,QAAS,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBARD,E,gEAWE,IAAD,OAClBE,OAAOC,QAAQC,KAAKC,KAAI,SAACC,GACvB,EAAKC,SAAS,CAACV,MAAOS,EAAOE,eAC7BC,QAAQC,IAAIJ,EAAOE,mB,mFAOVG,GACXnB,KAAKe,SAAS,CAACT,QAASa,EAAMC,OAAOC,U,mCAG1BF,GAAQ,IAAD,OAClBT,OAAOC,QAAQC,KAAKC,KAAI,SAACC,GACvB,IAAIQ,EAASR,EAAOE,aACpBM,EAAOC,QAAQ,EAAKnB,MAAME,SAC1BI,OAAOC,QAAQC,KAAKY,IAAI,CAACR,aAAcM,IAAS,WAC9C,EAAKP,SAAS,CAAEV,MAAM,CAAE,EAAKD,MAAME,SAAd,mBAA0B,EAAKF,MAAMC,QAAQC,QAAS,a,iCAKtEP,GACT,IAAMM,EAAQL,KAAKI,MAAMC,MAAMoB,QAAO,SAAAC,GAAQ,OAAIA,IAAa3B,KAC/DW,OAAOC,QAAQC,KAAKC,KAAI,SAACC,GACvB,IAAIQ,EAASR,EAAOE,aACpBM,EAAOK,OAAOL,EAAOM,QAAQ7B,GAAO,GACpCW,OAAOC,QAAQC,KAAKY,IAAI,CACtBR,aAAcM,OAGlBtB,KAAKe,SAAS,CAAEV,MAAOA,M,+BAGf,IAAD,OACP,OACE,yBAAKT,UAAU,WACb,0CACA,6CACA,4BAAQC,QAASG,KAAKS,cAAtB,KACA,2BACEoB,KAAK,OACLC,YAAY,+BACZT,MAAOrB,KAAKI,MAAME,QAClByB,SAAU/B,KAAKO,eAEhBP,KAAKI,MAAMC,MAAM2B,KAAI,SAAAjC,GAAI,OACxB,kBAAC,EAAD,CAAYD,WAAY,EAAKA,WAAYC,KAAMA,Y,GA7DvCE,IAAMC,WCMJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.8e9db507.chunk.js","sourcesContent":["import React from 'react';\n\nclass SiteOption extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillUnmount() {\n  }\n\n  render() {\n    return (\n      <div className=\"site-option\">\n        <p onClick={() => this.props.removeSite(this.props.site)} className=\"delete-button\">x</p>\n        <p>{this.props.site}</p>\n      </div>\n    );\n  }\n}\n\nexport default SiteOption;\n","/*global chrome*/\n\nimport React from 'react';\nimport './App.css';\nimport SiteOption from './SiteOption.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sites: [],\n      newSite: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeSite = this.removeSite.bind(this)\n  }\n\n  componentDidMount() {\n    chrome.storage.sync.get((result) => {\n      this.setState({sites: result.blockedSites});\n      console.log(result.blockedSites);\n    })\n  }\n\n  componentWillUnmount() {\n  }\n\n  handleChange(event) {\n    this.setState({newSite: event.target.value});\n  }\n\n  handleSubmit(event) {\n    chrome.storage.sync.get((result) => {\n      let newArr = result.blockedSites;\n      newArr.unshift(this.state.newSite);\n      chrome.storage.sync.set({blockedSites: newArr}, () => {\n        this.setState({ sites: [this.state.newSite, ...this.state.sites], newSite: \"\" });\n      })\n    })\n  }\n\n  removeSite(site) {\n    const sites = this.state.sites.filter(siteItem => siteItem !== site);\n    chrome.storage.sync.get((result) => {\n      let newArr = result.blockedSites;\n      newArr.splice(newArr.indexOf(site), 1);\n      chrome.storage.sync.set({\n        blockedSites: newArr\n      })\n    })\n    this.setState({ sites: sites });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h1>BW_BROWSER</h1>\n        <h2>BLOCKED SITES</h2>\n        <button onClick={this.handleSubmit}>+</button>\n        <input \n          type=\"text\" \n          placeholder=\"block site (ex. youtube.com)\" \n          value={this.state.newSite} \n          onChange={this.handleChange}\n        />\n        {this.state.sites.map(site => (\n          <SiteOption removeSite={this.removeSite} site={site}></SiteOption>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}